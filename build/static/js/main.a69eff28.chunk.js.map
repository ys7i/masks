{"version":3,"sources":["model/RedTurn.tsx","model/Masks.tsx","components/mask/ColorMask.tsx","model/Square.tsx","components/square/Square.tsx","components/board/Board.tsx","components/territory/Territory.tsx","model/Ring.tsx","model/Win.tsx","components/game/Game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["redTurn","props","group","useRef","useGLTF","nodes","materials","ref","dispose","castShadow","receiveShadow","geometry","Red002","material","color","scale","rotation","Math","PI","preload","Mask","Plane002","THREE","roughness","ColorMask","size","position","location","slice","fallback","SquareModel","onClick","clickMethod","me","place","Cube002","Square","situation","aboutMe","renderMask","index","Suspense","String","Board","renderSquare","redTerritory","blueTerritory","onBoard","Territory","handled","Ring","useFrame","current","x","Torus002","Model","Red001","game","css","Game","useState","setSituation","redMasks","setRedMasks","blueMasks","setBlueMasks","turn","setTurn","selected","setSelected","winner","setWinner","judgeWinner","copy","winnerColor","caluculateWinner","resetGame","changeToSelected","findColorIndex","state","changeToUnselected","console","error","Error","clickedMask","clickedIndex","selectedIndex","selectedSize","removeSelectedBoard","nonSelected","removeSelectedTerritory","floor","mask","i","result","map","element","lines","win","length","a","b","c","camera","fov","near","far","intensity","App","app","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a69eff28.chunk.js","sourcesContent":["/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useGLTF } from '@react-three/drei'\nimport { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'\nimport { Turn } from '../types/situation'\n\ntype GLTFResult = GLTF & {\n  nodes: {\n    Red002: THREE.Mesh\n  }\n  materials: {\n    ['Material.006']: THREE.MeshStandardMaterial\n  }\n}\n\n// eslint-disable-next-line no-undef\nexport default function redTurn(props: JSX.IntrinsicElements['group'] & {color: Turn}) {\n  const group = useRef<THREE.Group>()\n  const { nodes, materials } = useGLTF('/redTurn.glb') as GLTFResult\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.Red002.geometry}\n        material={materials['Material.006']}\n        material-color={props.color === 'red' ? 0xff0000 : 0x0000ff}\n        scale={0.09}\n        rotation={ props.color === 'red' ? [0, Math.PI, 0] : [0, 0, 0]}\n      />\n    </group>\n  )\n}\n\nuseGLTF.preload('/redTurn.glb')\n","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useGLTF } from '@react-three/drei'\nimport { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'\nimport { applyProps } from '@react-three/fiber'\nimport { Turn } from '../types/situation'\n\ntype GLTFResult = GLTF & {\n  nodes: {\n    Plane002: THREE.Mesh\n  }\n}\n\n// eslint-disable-next-line no-undef\nexport default function Mask(props: JSX.IntrinsicElements['group'] & {color: Turn}) {\n  const group = useRef<THREE.Group>()\n  const { nodes } = useGLTF('/Masks.glb') as GLTFResult\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.Plane002.geometry}\n        material={props.color === 'red' ? new THREE.MeshStandardMaterial({ color: 0xFF0000, roughness: 0.5 }) : new THREE.MeshStandardMaterial({ color: 0x0000FF, roughness: 0.5 })}\n        scale={[4, 1, 2]}\n        rotation={ props.color === 'blue' ? [0, Math.PI, 0] : [0, 0, 0]}\n\n      />\n    </group>\n  )\n}\n\nuseGLTF.preload('/Masks.glb')\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React, { Suspense } from 'react';\nimport { MaskColor } from '../../types/situation';\nimport Mask from '../../model/Masks';\n\ntype Props = {\n  color: MaskColor;\n  size: number;\n  location: number[];\n};\nconst ColorMask: React.FC<Props> = ({ color, size, location }) => {\n  let position = location.slice();\n  position[1] = size === 2 ? 0.05 : size === 1 ? 0.02 : 0;\n    return (\n      <Suspense fallback={null}>\n        <Mask\n          scale={size === 2 ? 0.1 : size === 1 ? 0.07 : 0.04}\n          position={\n            (color === 'red' || color === 'blue')\n              ? [position[0], position[1], position[2]]\n              : [position[0], position[1] + 0.3, position[2]]\n          }\n          color={(color === 'red' || color === 'selectedRed') ? 'red' : 'blue'}\n        />\n      </Suspense>\n    );\n};\n\nexport default ColorMask;\n","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useGLTF } from '@react-three/drei'\nimport { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'\n\ntype GLTFResult = GLTF & {\n  nodes: {\n    Cube002: THREE.Mesh\n  }\n  materials: {\n    ['Material.013']: THREE.MeshStandardMaterial\n  }\n}\n\n// eslint-disable-next-line no-undef\nexport default function SquareModel(props: JSX.IntrinsicElements['group'] & { clickMethod: any, place: string, me: string }) {\n  const group = useRef<THREE.Group>()\n  const { nodes, materials } = useGLTF('/square.glb') as GLTFResult\n  return (\n    <group ref={group} {...props} dispose={null} onClick={() => { props.clickMethod(props.me, props.place) }}>\n      <mesh castShadow receiveShadow geometry={nodes.Cube002.geometry} material={materials['Material.013']} />\n    </group>\n  )\n}\n\nuseGLTF.preload('/square.glb')\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\nimport { AboutMe, Mask, MaskColor } from '../../types/situation';\nimport ColorMask from '../mask/ColorMask';\nimport SquareModel from './../../model/Square';\n\nexport type Props = {\n  situation: Mask[];\n  place: number;\n  aboutMe: AboutMe;\n  clickMethod: (aboutMe: AboutMe, place: number) => void;\n  position: number[];\n};\n\nconst Square: React.FC<Props> = ({\n  situation,\n  place,\n  clickMethod,\n  aboutMe,\n  position,\n}) => {\n  const renderMask = (index: number) => {\n    if (situation[index] !== null) {\n      const color = situation[index] as MaskColor;\n      return <ColorMask color={color} size={index} location={position} />;\n    }\n  };\n  return (\n    <React.Suspense fallback={null}>\n      <SquareModel\n        position={[position[0], position[1], position[2]]}\n        scale={aboutMe === 'onBoard' ? 0.0128 : 0.008}\n        clickMethod={clickMethod}\n        place={String(place)}\n        me={aboutMe}\n      />\n      {renderMask(0)}\n      {renderMask(1)}\n      {renderMask(2)}\n    </React.Suspense>\n  );\n};\n\nexport default Square;\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\n// import { useLoader } from '@react-three/fiber';\nimport React from 'react';\n// import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { AboutMe, Situation } from '../../types/situation';\nimport Square from '../square/Square';\n\ntype Props = {\n  situation: Situation;\n  clickMethod: (aboutMe: AboutMe, place: number) => void;\n};\n\nconst location = [\n  [-0.65, 0, -0.65],\n  [0, 0, -0.65],\n  [0.65, 0, -0.65],\n  [-0.65, 0, 0],\n  [0, 0, 0],\n  [0.65, 0, 0],\n  [-0.65, 0, 0.65],\n  [0, 0, 0.65],\n  [0.65, 0, 0.65],\n];\n\nconst Board: React.FC<Props> = ({ situation, clickMethod }) => {\n  const renderSquare = (place: number) => {\n    return (\n      <Square\n        situation={situation[place]}\n        clickMethod={clickMethod}\n        place={place}\n        aboutMe='onBoard'\n        position={location[place]}\n      />\n    );\n  };\n\n  return (\n    <React.Suspense fallback={null}>\n      {renderSquare(0)}\n      {renderSquare(1)}\n      {renderSquare(2)}\n      {renderSquare(3)}\n      {renderSquare(4)}\n      {renderSquare(5)}\n      {renderSquare(6)}\n      {renderSquare(7)}\n      {renderSquare(8)}\n    </React.Suspense>\n  );\n};\n\n// const boardRow = css`\n//   display: flex;\n//   justify-content: center;\n// `;\n// const board = css`\n//   margin: 0 auto;\n// `;\n\nexport default Board;\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/react';\nimport React from 'react';\nimport { AboutMe, Mask } from '../../types/situation';\nimport Square from '../square/Square';\n\ntype Props = {\n  handled: Mask[];\n  aboutMe: AboutMe;\n  clickMethod: (aboutMe: AboutMe, place: number) => void;\n};\n\nconst location = {\n  redTerritory: [\n    [-1, 0, -1.25],\n    [-0.6, 0, -1.25],\n    [-0.2, 0, -1.25],\n    [0.2, 0, -1.25],\n    [0.6, 0, -1.25],\n    [1, 0, -1.25],\n  ],\n  blueTerritory: [\n    [1, 0, 1.25],\n    [0.6, 0, 1.25],\n    [0.2, 0, 1.25],\n    [-0.2, 0, 1.25],\n    [-0.6, 0, 1.25],\n    [-1, 0, 1.25],\n  ],\n  onBoard: [],\n};\n\nconst Territory: React.FC<Props> = ({ handled, aboutMe, clickMethod }) => {\n  const renderSquare = (situation: Mask[], place: number) => {\n    return (\n      <Square\n        situation={situation}\n        place={place}\n        clickMethod={clickMethod}\n        aboutMe={aboutMe}\n        position={location[aboutMe][place]}\n      />\n    );\n  };\n  return (\n    <React.Suspense fallback={null}>\n      {renderSquare([null, null, handled[5]], 5)}\n      {renderSquare([null, null, handled[4]], 4)}\n      {renderSquare([null, handled[3], null], 3)}\n      {renderSquare([null, handled[2], null], 2)}\n      {renderSquare([handled[1], null, null], 1)}\n      {renderSquare([handled[0], null, null], 0)}\n    </React.Suspense>\n  );\n};\n\nexport default Territory;\n","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useGLTF } from '@react-three/drei'\nimport { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'\nimport { useFrame } from '@react-three/fiber'\nimport { Group } from 'three'\nimport { Turn } from '../types/situation'\n\ntype GLTFResult = GLTF & {\n  nodes: {\n    Torus002: THREE.Mesh\n  }\n  materials: {\n    ['Material.012']: THREE.MeshStandardMaterial\n  }\n}\n\n// eslint-disable-next-line no-undef\nexport default function Ring(props: JSX.IntrinsicElements['group'] & { color: (Turn | 'silver')}) {\n  const group = useRef<THREE.Group>({} as Group)\n  useFrame(() => {\n    group.current.rotation.x += 0.01;\n  });\n  const { nodes, materials } = useGLTF('/ring.glb') as GLTFResult\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.Torus002.geometry}\n        material={materials['Material.012']}\n        material-color={props.color === 'red' ? 0xff0000 : props.color==='blue' ? 0x0000ff : 0xbababa }\n        scale={[2.96, 1.13, 1.13]}\n      />\n    </group>\n  )\n}\n\nuseGLTF.preload('/ring.glb')\n","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useGLTF } from '@react-three/drei'\nimport { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'\nimport { Turn } from '../types/situation'\n\ntype GLTFResult = GLTF & {\n  nodes: {\n    Red001: THREE.Mesh\n  }\n}\n\n// eslint-disable-next-line no-undef\nexport default function Model(props: JSX.IntrinsicElements['group'] & { color: Turn}) {\n  const group = useRef<THREE.Group>()\n  const { nodes } = useGLTF('/win.glb') as GLTFResult\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.Red001.geometry}\n        material={props.color === 'red' ? new THREE.MeshStandardMaterial({ color: 0xFF0000 }) : new THREE.MeshStandardMaterial({ color: 0x0000FF })}\n        // position={[-10.1, -3.01, -18.03]}\n        rotation={ props.color==='red' ? [0, Math.PI, 0]: [0, 0, 0] }\n        scale={0.08}\n      />\n    </group>\n  )\n}\n\nuseGLTF.preload('/win.glb')\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/react';\nimport { Canvas } from '@react-three/fiber';\nimport React, { useState } from 'react';\nimport RedTurn from '../../model/RedTurn';\nimport { AboutMe, Mask, Situation, Turn } from '../../types/situation';\nimport Board from '../board/Board';\nimport Territory from '../territory/Territory';\nimport Ring from '../../model/Ring';\nimport Win from '../../model/Win';\n\nconst Game: React.FC = () => {\n  const [situation, setSituation] = useState<Situation>([\n    [null, null, null],\n    [null, null, null],\n    [null, null, null],\n    [null, null, null],\n    [null, null, null],\n    [null, null, null],\n    [null, null, null],\n    [null, null, null],\n    [null, null, null],\n  ]);\n  const [redMasks, setRedMasks] = useState<Mask[]>([\n    'red',\n    'red',\n    'red',\n    'red',\n    'red',\n    'red',\n  ]);\n  const [blueMasks, setBlueMasks] = useState<Mask[]>([\n    'blue',\n    'blue',\n    'blue',\n    'blue',\n    'blue',\n    'blue',\n  ]);\n  const [turn, setTurn] = useState<Turn>('red');\n  const [selected, setSelected] = useState<{\n    aboutMe: AboutMe;\n    place: number;\n  } | null>(null);\n\n  const [winner, setWinner] = useState<Turn | null>(null);\n\n  const judgeWinner = (copy: Situation): void => {\n    const winnerColor = caluculateWinner(copy);\n    if (winnerColor === null) return;\n    setWinner(winnerColor);\n    return;\n  };\n\n  const resetGame = () => {\n    setSituation([\n      [null, null, null],\n      [null, null, null],\n      [null, null, null],\n      [null, null, null],\n      [null, null, null],\n      [null, null, null],\n      [null, null, null],\n      [null, null, null],\n      [null, null, null],\n    ])\n    setTurn('red')\n    setRedMasks([\n      'red',\n      'red',\n      'red',\n      'red',\n      'red',\n      'red',\n    ])\n    setBlueMasks([\n      'blue',\n      'blue',\n      'blue',\n      'blue',\n      'blue',\n      'blue',\n    ])\n    setWinner(null)\n    setSelected(null)\n  }\n\n  const changeToSelected = (aboutMe: AboutMe, place: number): void => {\n    switch (aboutMe) {\n      case 'onBoard':\n        {\n          const [color, index] = findColorIndex(situation[place]);\n          if (index !== -1 && color === turn) {\n            setSituation((state) => {\n              const copy = state.slice();\n              copy[place][index] =\n                color === 'red' ? 'selectedRed' : 'selectedBlue';\n              return copy;\n            });\n            setSelected({ aboutMe: 'onBoard', place });\n          }\n        }\n        return;\n\n      case 'redTerritory':\n        if (redMasks[place] === turn) {\n          setRedMasks((state) => {\n            const copy = state.slice();\n            copy[place] = 'selectedRed';\n            return copy;\n          });\n          setSelected({ aboutMe: 'redTerritory', place });\n        }\n        return;\n\n      case 'blueTerritory':\n        if (blueMasks[place] === turn) {\n          setBlueMasks((state) => {\n            const copy = state.slice();\n            copy[place] = 'selectedBlue';\n            return copy;\n          });\n          setSelected({ aboutMe: 'blueTerritory', place });\n        }\n        return;\n    }\n  };\n\n  const onClick = (aboutMe: AboutMe, place: number): void => {\n    if (winner !== null) {\n      return;\n    }\n    if (selected === null) {\n      changeToSelected(aboutMe, place);\n      return;\n    }\n    changeToUnselected(aboutMe, place);\n    return;\n  };\n\n  const changeToUnselected = (aboutMe: AboutMe, place: number): void => {\n    if (selected === null) {\n      console.error('One piece must be selected');\n      throw new Error();\n    }\n    switch (aboutMe) {\n      case 'onBoard': {\n        const [clickedMask, clickedIndex] = findColorIndex(situation[place]); //clickされた場所\n        const selectedIndex = selectedSize();\n        if (clickedMask === null) {\n          setSituation((state) => {\n            let copy = state.slice();\n            copy[place][selectedIndex] = turn;\n            copy = removeSelectedBoard(copy);\n            judgeWinner(copy);\n            return copy;\n          });\n          setTurn(turn === 'red' ? 'blue' : 'red');\n          return;\n        }\n        if (clickedMask === 'selectedRed' || clickedMask === 'selectedBlue') {\n          //board上かつselectedをclick\n          nonSelected();\n          return;\n        }\n        if (selectedIndex > clickedIndex) {\n          setSituation((state) => {\n            let copy = state.slice();\n            copy[place][selectedIndex] = turn;\n            copy = removeSelectedBoard(copy);\n            judgeWinner(copy);\n            return copy;\n          });\n          setTurn(turn === 'red' ? 'blue' : 'red');\n          return;\n        }\n        if (\n          (selected.aboutMe === 'redTerritory' ||\n            selected.aboutMe === 'blueTerritory') &&\n          clickedMask === turn\n        ) {\n          nonSelected();\n          changeToSelected('onBoard', place);\n        }\n        return;\n      }\n      case 'redTerritory':\n        if (turn === 'blue') {\n          return;\n        } else {\n          if (selected.aboutMe === 'redTerritory' && selected.place === place) {\n            nonSelected();\n            return;\n          }\n          if (selected.aboutMe === 'redTerritory' && selected.place !== place) {\n            nonSelected();\n            if (redMasks[place] === 'red') {\n              setRedMasks((state) => {\n                const copy = state.slice();\n                copy[place] = 'selectedRed';\n                return copy;\n              });\n              setSelected({ aboutMe: 'redTerritory', place: place });\n            }\n            return;\n          }\n          if (selected.aboutMe === 'onBoard') {\n            nonSelected();\n            changeToSelected('redTerritory', place);\n            return;\n          }\n          return;\n        }\n\n      case 'blueTerritory':\n        if (turn === 'red') {\n          return;\n        } else {\n          //turn === 'blue'\n          if (\n            selected.aboutMe === 'blueTerritory' &&\n            selected.place === place\n          ) {\n            nonSelected();\n            return;\n          }\n          if (\n            selected.aboutMe === 'blueTerritory' &&\n            selected.place !== place\n          ) {\n            nonSelected();\n            if (blueMasks[place] === 'blue') {\n              setBlueMasks((state) => {\n                const copy = state.slice();\n                copy[place] = 'selectedBlue';\n                return copy;\n              });\n              setSelected({ aboutMe: 'blueTerritory', place: place });\n            }\n            return;\n          }\n          if (selected.aboutMe === 'onBoard') {\n            nonSelected();\n            changeToSelected('blueTerritory', place);\n            return;\n          }\n        }\n    }\n  };\n\n  //removeSelectedとsetSelectedはどちらか片方\n  const removeSelectedBoard = (copy: Situation): Situation => {\n    if (selected === null) {\n      return copy;\n    }\n    if (selected.aboutMe === 'onBoard') {\n      const [color, index] = findColorIndex(copy[selected.place]);\n      if (color === 'selectedRed' || color === 'selectedBlue') {\n        copy[selected.place][index] = null;\n      }\n      setSelected(null);\n      return copy;\n    }\n    removeSelectedTerritory();\n    return copy;\n  };\n\n  const removeSelectedTerritory = () => {\n    if (selected === null) {\n      return;\n    }\n    if (selected.aboutMe === 'redTerritory') {\n      setRedMasks((state) => {\n        const copy = state.slice();\n        copy[selected.place] = null;\n        setSelected(null);\n        return copy;\n      });\n    } else {\n      setBlueMasks((state) => {\n        const copy = state.slice();\n        copy[selected.place] = null;\n        setSelected(null);\n        return copy;\n      });\n    }\n  };\n\n  const nonSelected = () => {\n    if (selected === null) {\n      return;\n    }\n    if (selected.aboutMe === 'onBoard') {\n      setSituation((state) => {\n        const copy = state.slice();\n        const [, index] = findColorIndex(situation[selected.place]);\n        copy[selected.place][index] = turn;\n        return copy;\n      });\n      setSelected(null);\n      return;\n    }\n    if (selected.aboutMe === 'redTerritory') {\n      setRedMasks((state) => {\n        const copy = state.slice();\n        copy[selected.place] = turn;\n        return copy;\n      });\n    } else {\n      setBlueMasks((state) => {\n        const copy = state.slice();\n        copy[selected.place] = turn;\n        return copy;\n      });\n    }\n    setSelected(null);\n  };\n\n  const selectedSize = (): number => {\n    if (selected === null) {\n      return -1;\n    }\n    if (selected.aboutMe === 'onBoard') {\n      const [, index] = findColorIndex(situation[selected.place]);\n      return index;\n    }\n    return Math.floor(selected.place / 2);\n  };\n\n  const findColorIndex = (mask: Mask[]): [Mask, number] => {\n    for (let i = 2; i > -1; i--) {\n      if (mask[i] !== null) {\n        return [mask[i], i];\n      }\n    }\n    return [null, -1];\n  };\n\n  const caluculateWinner = (copy: Situation): Turn | null => {\n    const situationCopy = copy.slice();\n    const result = situationCopy.map((element) => {\n      if (element[2] !== null) {\n        return element[2];\n      }\n      if (element[1] !== null) {\n        return element[1];\n      }\n      if (element[0] !== null) {\n        return element[0];\n      }\n      return null;\n    });\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    let win = null;\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (result[a] && result[a] === result[b] && result[a] === result[c]) {\n        if (win !== null) {\n          return turn === 'red' ? 'blue' : 'red';\n        }\n        win = result[a] as Turn;\n      }\n    }\n    return win;\n  };\n  return (\n    <div css={game}>\n      <Canvas\n        camera={{\n          fov: 75,\n          near: 0.1,\n          far: 1000,\n          position: [0, 4.0, 0],\n        }}\n        // style={{ height: 610, width: 360 }}\n      >\n        <axesHelper/>\n        <ambientLight intensity={0.1} />\n        <directionalLight position={[-2, 2, -2.1]} intensity={0.2} />\n        <directionalLight position={[2, 2, 2.0]} intensity={0.6} />\n        {winner === 'red' ? (\n          <React.Suspense fallback={null}>\n            <Win onClick={resetGame} color='red' position={[0.4, 0, -1.7]}/>\n            <Ring position={[0, 0, -1.7]} onClick={resetGame} color='red' scale={ 0.45 }/>\n          </React.Suspense>\n        ) : turn === 'red' && winner === null ? (\n          <React.Suspense fallback={null}>\n              <RedTurn color='red' position={[0.4, 0, -1.7]}/>\n              <Ring position={[0, 0, -1.7]} scale={ 0.45 } color='silver'/>\n          </React.Suspense>\n        ) : null}\n        <Territory\n          handled={redMasks}\n          aboutMe='redTerritory'\n          clickMethod={onClick}\n        />\n        <Board situation={situation} clickMethod={onClick} />\n        <Territory\n          handled={blueMasks}\n          aboutMe='blueTerritory'\n          clickMethod={onClick}\n        />\n        {winner === 'blue' ? (\n          <React.Suspense fallback={null}>\n            <Win onClick={resetGame} color='blue' position={[-0.35, 0, 1.85]} scale={ 0.9}/>\n            <Ring onClick={resetGame} position={[0, 0, 1.8]} color='blue'  scale={ 0.45 } />\n          </React.Suspense>\n        ) : turn === 'blue' && winner === null ? (\n          <React.Suspense fallback={null}>\n              <RedTurn color='blue' position={[-0.4, 0, 1.8]}/>\n              <Ring position={[0, 0, 1.8]} scale={ 0.45 } color='silver' />\n          </React.Suspense>\n        ) : null}\n      </Canvas>\n    </div>\n  );\n};\nconst game = css`\n  margin: 0 auto;\n  display: grid;\n  place-items: center;\n  width: max(360px, 100%);\n  height: max(610px, 100%);\n`;\n\nexport default Game;\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/react';\nimport React from 'react';\nimport Game from './components/game/Game';\n\nconst App: React.FC = () => {\n  return (\n    <div css={app}>\n      <Game />\n    </div>\n  );\n};\n\nexport default App;\nconst app = css`\n  width: max(500px, 100%);\n  height: 1000px;\n`;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}